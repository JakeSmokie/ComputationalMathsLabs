@using HumbleMaths.Converters
@using HumbleMaths.Parsers
@using HumbleMaths.Processors
@model MatrixModel

@{
    ViewBag.Title = "Лабораторная работа 1";
    Layout = "_Layout";
}

<script type="text/javascript">
    function submit() {
        window.location.replace("/Maths/Gauss/" + $('#matrix')[0].value);
    }
</script>

<div class="row justify-content-between">
    <div class="col-5">
        <h4>Лабораторная работа 1</h4>
    </div>
    <div class="col-1">
        <a asp-area="" asp-controller="Maths" asp-action="Index"
           class="btn btn-dark">
            Назад
        </a>
    </div>
</div>
<div class="container-fluid">
    <form asp-route="gauss" method="post" id="form">
        <div class="form-group">
            <label for="matrix">Матрица, для которой должна быть решена СЛАУ</label>
            <input type="text" class="form-control" name="matrix" id="matrix" aria-describedby="matrixHelp" placeholder="((a, b, c), (d, e, f), ...)">
            <small id="matrixHelp" class="form-text text-muted">Матрица должна иметь размерность N x (N + 1)</small>
        </div>
        <button type="submit" class="btn btn-primary">Решить</button>
    </form>
</div>
<div class="container-fluid" style="text-align: center">
    @if (Model == null) {
        <h5>Ожидание ввода...</h5>
    } else if (Model.Matrix == "") {
        <h5>Введена неверная матрица</h5>
    } else if (Model.Solution == null) {
        <h5>Данная система не имеет решений</h5>
    } else {
        var converter = new MatrixLatexConverter();
        var clamper = new MatrixClamper();
        var determinantCalculator = new MatrixDeterminantCalculator();
        var errorsCalculator = new LinearSystemSolutionErrorsCalculator();

        <h5>Введённая матрица</h5>
        <p>$@converter.ConvertToLatex(Model.System)$</p>

        var stepMatrix = Model.Solution.EliminationStep ?? Model.System;

        if (!stepMatrix.Equals(Model.System)) {
            <h5>Уничтожение линейно-зависимых и пустых строк</h5>
            <p>$@converter.ConvertToLatex(stepMatrix)$</p>
        }

        foreach (var step in Model.Solution.TransformationSteps) {
            <h5>@(step.Type == TransformType.Stabilizing ? "Стабилизация" : "Уничтожение элементов под диагональю")</h5>
            <p>$@converter.ConvertToLatex(step.Matrix)$</p>
        }

        <h5>Решение</h5>
        foreach (var step in Model.Solution.SolvingSteps) {
            <p>$@converter.ConvertToLatex(step)$</p>
        }


        <h5>Результат</h5>
        for (var i = 0; i < Model.Solution.Result.Count; i++) {
            var sol = Model.Solution.Result[i];
            <p>$x_@(i + 1) = @sol$</p>
        }

        var matrix = clamper.ClampMatrixToSquare(stepMatrix);
        var steps = Model.Solution.TransformationSteps;
        var lastStep = steps.Last().Matrix;
        var lastStepClamped = clamper.ClampMatrixToSquare(lastStep);
        var multiplier = steps.Count(x => x.Type == TransformType.Stabilizing) % 2 == 1 ? " * -1 " : "";

        <h5>Определитель по гауссу</h5>
        <p>
            $det @converter.ConvertToLatex(lastStepClamped)
            = @(string.Join(" * ", lastStepClamped.MainDiagonalItems) + multiplier)
            = @Model.Solution.GetDeterminantByGauss()$
        </p>
        <h5>Определитель через разложения по строкам</h5>
        <p>$det @converter.ConvertToLatex(matrix) = @determinantCalculator.CalculateDeterminant(matrix)$</p>

        <h5>Погрешности</h5>

        var errors = errorsCalculator.CalculateErrors(stepMatrix, Model.Solution.Result);

        for (var i = 0; i < errors.Count; i++) {
            var error = errors[i];
            <p>$\Delta_@(i + 1) = @error$</p>
        }
    }
</div>