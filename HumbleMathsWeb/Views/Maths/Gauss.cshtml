@using HumbleMaths.Calculators
@using HumbleMaths.Calculators.Matrix
@using HumbleMaths.Converters
@using HumbleMaths.Parsers
@using HumbleMaths.Processors
@model MatrixModel

@{
    ViewBag.Title = "Лабораторная работа 1";
    Layout = "_Layout";
}

<script type="text/javascript">
    function random() {
        let str = "";
        let size = Math.round(Math.random() * 5 + 1);

        for (let i = 0; i < size; i++) {
            for (let j = 0; j < size + 1; j++) {
                str += ((Math.random() - 0.5) * 10000).toFixed(4);

                if (j != size) {
                    str += ", ";
                }
            }

            str += ";\n";
        }

        document.getElementsByName("Input")[0].value = str;
    }

    function upload() {
        const fileReader = new FileReader();
        fileReader.onload = function() {
            const xhr = new XMLHttpRequest();
            xhr.open('post', "");
            xhr.setRequestHeader("Content-type", "text/plain");
            const result = window.atob(fileReader.result.replace("data:text/plain;base64,", ""));
            xhr.send(result);
            const input = result;
            console.log(input);

            document.getElementsByName("Input")[0].value = input;
        };
        fileReader.readAsDataURL(document.getElementById("file").files[0]);
    }
</script>

<div class="row justify-content-between">
    <div class="col-5">
        <h4>Решение СЛАУ методом Гаусса</h4>
    </div>
    <div class="col-1">
        <a asp-area="" asp-controller="Maths" asp-action="Index"
           class="btn btn-dark">
            Назад
        </a>
    </div>
</div>
<hr/>
<div class="container-fluid">
    <form asp-route="gauss" method="post" id="form">
        <div class="form-group">
            <label for="matrix">Матрица, для которой должна быть решена СЛАУ</label>

            <textarea class="form-control" rows="5" id="matrix" asp-for="Input"></textarea>
            <small id="matrixHelp" class="form-text text-muted">Элементы указываются через запятую, строки матрицы делятся точкой с запятой</small>
        </div>
        <button type="submit" class="btn btn-primary">Решить</button>
        <input class="btn" type="file" name="file" id="file">
        <input class="btn" type="button" value="Загрузить" onclick="upload()"/>
        <input class="btn" type="button" value="Создать случайные коэффициенты" onclick="random()"/>
    </form>
</div>
<hr/>
<div class="container-fluid" style="text-align: center">
    @if (Model == null) {
        <h5>Ожидание ввода...</h5>
        return;
    }
    @if (Model.System == null) {
        <h5>Введена неверная матрица</h5>
        return;
    }
    @if (Model.Solution == null) {
        <h5>Данная система не имеет решений</h5>
        return;
    }

    @{
        var converter = new MatrixLatexConverter();
        var clamper = new MatrixClamper();
        var determinantCalculator = new MatrixDeterminantCalculator();
        var errorsCalculator = new LinearSystemSolutionErrorsCalculator();
    }

    <h5>Затрачено времени на расчёт</h5>
    <p>@Model.Stopwatch.Elapsed</p>

    <h5>Введённая матрица</h5>
    <p>$@converter.ConvertToLatex(Model.System)$</p>
    @{
        var stepMatrix = Model.Solution.EliminationStep ?? Model.System;

        if (!stepMatrix.StringEquals(Model.System)) {
            <h5>Уничтожение линейно-зависимых и пустых строк</h5>
            <p>$@converter.ConvertToLatex(stepMatrix)$</p>
        }

        foreach (var step in Model.Solution.TransformationSteps) {
            <h5>@(step.Type == TransformType.Stabilizing ? "Стабилизация" : "Уничтожение элементов под диагональю")</h5>
            <p>$@converter.ConvertToLatex(step.Matrix)$</p>
        }

        if (Model.Solution.SolvingSteps.Count > 0) {
            <h5>Решение</h5>
        }
        foreach (var step in Model.Solution.SolvingSteps) {
            <p>$@converter.ConvertToLatex(step)$</p>
        }

        if (Model.Solution.Result.Count > 0) {
            <h5>Результат</h5>
        }
        else {
            <h5>Решение отсутствует</h5>
        }

        for (var i = 0; i < Model.Solution.Result.Count; i++) {
            var sol = Model.Solution.Result[i];
            <p>$x_{@(i + 1)} = @sol$</p>
        }

        var matrix = clamper.ClampMatrixToSquare(stepMatrix);
        var steps = Model.Solution.TransformationSteps;
        var lastStep = steps.LastOrDefault().Matrix;


        if (lastStep != null) {
            var lastStepClamped = clamper.ClampMatrixToSquare(lastStep);
            var multiplier = steps.Count(x => x.Type == TransformType.Stabilizing) % 2 == 1 ? " * -1 " : "";

            <h5>Определитель по гауссу</h5>
            <p>
                $det @(converter.ConvertToLatex(lastStepClamped, false) + multiplier)
                = @(string.Join(" * ", lastStepClamped.MainDiagonalItems) + multiplier) = @Model.Solution.GetDeterminantByGauss()$
            </p>

            <h5>Определитель через разложения по строкам</h5>
            if (matrix.Width < 20) {
                <p>$det @converter.ConvertToLatex(matrix, false) = @determinantCalculator.CalculateDeterminant(matrix)$</p>
            }
            else {
                <p>...</p>
            }

            if (Model.Solution.Result.Count > 0) {
                <h5>Погрешности</h5>
                var errors = errorsCalculator.CalculateErrors(stepMatrix, Model.Solution.Result);

                for (var i = 0; i < errors.Count; i++) {
                    var error = errors[i];
                    <p>$\Delta_{@(i + 1)} = @error$</p>
                }
            }
        }
    }

</div>